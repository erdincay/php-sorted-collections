{"name":"PHP Sorted Collections","tagline":"Sorted Collections for PHP","body":"[![Downloads](https://poser.pugx.org/chdemko/sorted-collections/d/total.png)](https://packagist.org/packages/chdemko/sorted-collections)\r\n[![Latest Stable Version](https://poser.pugx.org/chdemko/sorted-collections/version.png)](https://packagist.org/packages/chdemko/sorted-collections)\r\n[![Latest Unstable Version](https://poser.pugx.org/chdemko/sorted-collections/v/unstable.png)](https://packagist.org/packages/chdemko/sorted-collections)\r\n[![Code coverage](https://coveralls.io/repos/chdemko/php-sorted-collections/badge.png?branch=master)](https://coveralls.io/r/chdemko/php-sorted-collections?branch=master)\r\n[![Build Status](https://secure.travis-ci.org/chdemko/php-sorted-collections.png)](http://travis-ci.org/chdemko/php-sorted-collections)\r\n[![License](https://poser.pugx.org/chdemko/sorted-collections/license.png)](http://www.cecill.info/licences/Licence_CeCILL-B_V1-en.html)\r\n\r\n### Citation\r\n\r\nIf you are using this project including publication in research activities, you have to cite it using ([BibTeX format](https://raw.github.com/chdemko/php-sorted-collections/master/cite.bib)). You are also pleased to send me an email to chdemko@gmail.com.\r\n* authors: Christophe Demko\r\n* title: php-sorted-collections: a PHP library for handling sorted collections\r\n* year: 2014\r\n* how published: http://chdemko.github.io/php-sorted-collections\r\n\r\n### API Doc\r\n* [API Doc](api)\r\n\r\n### Test code coverage\r\n* [Code coverage](coverage)\r\n\r\n### Tutorial\r\n\r\nThis set of PHP classes has been designed to store key/value pairs in a specified order (using a comparator function on keys). It uses AVL threaded tree as internal structures and performs operations in `log(n)` time.\r\n\r\n### Creation\r\n\r\nThe base class for storing sorted maps is the `TreeMap` class.\r\n\r\n~~~php\r\nrequire __DIR__ . '/vendor/autoload.php';\r\nuse chdemko\\SortedCollection\\TreeMap;\r\n\r\n// This will create a map indexed by numbers\r\n// it contains 10 key/value pairs from 0/0 to 9/9\r\n$map = TreeMap::create()->put(\r\n    [1=>1, 9=>9, 5=>5, 2=>2, 6=>6, 3=>3, 0=>0, 8=>8, 7=>7, 4=>4]\r\n);\r\n~~~\r\n\r\nThere are two other classes to create maps which are in fact views on another sorted map.\r\n\r\n~~~php\r\nrequire __DIR__ . '/vendor/autoload.php';\r\nuse chdemko\\SortedCollection\\TreeMap;\r\nuse chdemko\\SortedCollection\\ReversedMap;\r\nuse chdemko\\SortedCollection\\SubMap;\r\n\r\n$map = TreeMap::create()->put(\r\n    [1=>1, 9=>9, 5=>5, 2=>2, 6=>6, 3=>3, 0=>0, 8=>8, 7=>7, 4=>4]\r\n);\r\n\r\n// This will create a map which is the reverse of $map\r\n$reversed = ReversedMap::create($map);\r\n\r\n// This will create a map which is a sub map of $reversed\r\n$sub = SubMap::create($reversed, 7, 3);\r\n\r\n// This will display {\"7\":7,\"6\":6,\"5\":5,\"4\":4}\r\necho $sub . PHP_EOL;\r\n~~~\r\n\r\nFor sub maps there are other methods for creation\r\n\r\n~~~php\r\nrequire __DIR__ . '/vendor/autoload.php';\r\nuse chdemko\\SortedCollection\\TreeMap;\r\nuse chdemko\\SortedCollection\\SubMap;\r\n\r\n$map = TreeMap::create()->put(\r\n    [1=>1, 9=>9, 5=>5, 2=>2, 6=>6, 3=>3, 0=>0, 8=>8, 7=>7, 4=>4]\r\n);\r\n\r\n// This will create a map which is a sub map of $map from key 3 to the end\r\n$tail = SubMap::tail($map, 3);\r\n\r\n$map[10] = 10;\r\n\r\n// This will display {\"3\":3,\"4\":4,\"5\":5,\"6\":6,\"7\":7,\"8\":8,\"9\":9,\"10\":10}\r\necho $tail . PHP_EOL;\r\n\r\n// This will create a sub map of $map from beginning to key 7 (inclusive)\r\n$head = SubMap::head($map, 7, true);\r\n\r\n// This will display [0,1,2,3,4,5,6,7]\r\necho $head . PHP_EOL;\r\n~~~\r\n\r\nSets are created using similar functions\r\n\r\n~~~php\r\nrequire __DIR__ . '/vendor/autoload.php';\r\nuse chdemko\\SortedCollection\\TreeSet;\r\nuse chdemko\\SortedCollection\\ReversedSet;\r\nuse chdemko\\SortedCollection\\SubSet;\r\n\r\n$set = TreeSet::create()->put([1, 9, 5, 2, 6, 3, 0, 8, 7, 4]);\r\n$reversed = ReversedSet::create($set);\r\n$sub = SubSet::create($reversed, 7, 3);\r\n\r\n// This will display [7,6,5,4]\r\necho $sub . PHP_EOL;\r\n~~~\r\n\r\n### Iteration\r\n\r\nThese collections support PHP iteration.\r\n\r\nUsing maps\r\n~~~php\r\nrequire __DIR__ . '/vendor/autoload.php';\r\nuse chdemko\\SortedCollection\\TreeMap;\r\nuse chdemko\\SortedCollection\\ReversedMap;\r\nuse chdemko\\SortedCollection\\SubMap;\r\n\r\n$map = TreeMap::create()->put(\r\n    [1=>1, 9=>9, 5=>5, 2=>2, 6=>6, 3=>3, 0=>0, 8=>8, 7=>7, 4=>4]\r\n);\r\n$reversed = ReversedMap::create($map);\r\n$sub = SubMap::create($reversed, 7, 3);\r\n\r\n// This will display 7:7;6:6;5:5;4:4;\r\nforeach ($sub as $key => $value)\r\n{\r\n\techo $key . ':' . $value . ';';\r\n}\r\necho PHP_EOL;\r\n~~~\r\n\r\nUsing sets\r\n~~~php\r\nrequire __DIR__ . '/vendor/autoload.php';\r\nuse chdemko\\SortedCollection\\TreeSet;\r\nuse chdemko\\SortedCollection\\ReversedSet;\r\nuse chdemko\\SortedCollection\\SubSet;\r\n\r\n$set = TreeSet::create()->put([1, 9, 5, 2, 6, 3, 0, 8, 7, 4]);\r\n$reversed = ReversedSet::create($set);\r\n$sub = SubSet::create($reversed, 7, 3);\r\n\r\n// This will display 0:7;1:6;2:5;3:4;\r\nforeach ($sub as $key => $value)\r\n{\r\n\techo $key . ':' . $value . ';';\r\n}\r\necho PHP_EOL;\r\n~~~\r\n_**The behavior is unpredictable if the current key of an iterator is removed of the collection.**_\r\n\r\n### Counting\r\n\r\nThese collections support PHP counting\r\n\r\n~~~php\r\nrequire __DIR__ . '/vendor/autoload.php';\r\nuse chdemko\\SortedCollection\\TreeMap;\r\nuse chdemko\\SortedCollection\\ReversedMap;\r\nuse chdemko\\SortedCollection\\SubMap;\r\n\r\n$map = TreeMap::create()->put(\r\n    [1=>1, 9=>9, 5=>5, 2=>2, 6=>6, 3=>3, 0=>0, 8=>8, 7=>7, 4=>4]\r\n);\r\n$reversed = ReversedMap::create($map);\r\n$sub = SubMap::create($reversed, 7, 3);\r\n\r\n// This will display 4\r\necho count($sub) . PHP_EOL;\r\n~~~\r\n\r\n### Array access\r\n\r\nInsertion, modification, access and removal has been designed to work using PHP array access features\r\n\r\nUsing maps\r\n~~~php\r\nrequire __DIR__ . '/vendor/autoload.php';\r\nuse chdemko\\SortedCollection\\TreeMap;\r\nuse chdemko\\SortedCollection\\ReversedMap;\r\nuse chdemko\\SortedCollection\\SubMap;\r\n\r\n$map = TreeMap::create();\r\n$map[4] = 4;\r\n$map[2] = 2;\r\n$map[6] = 6;\r\nunset($map[4]);\r\n\r\n// This will display 1\r\necho isset($map[2]) . PHP_EOL;\r\n\r\n// This will display 2\r\necho $map[2] . PHP_EOL;\r\n~~~\r\n\r\nUsing sets\r\n~~~php\r\nrequire __DIR__ . '/vendor/autoload.php';\r\nuse chdemko\\SortedCollection\\TreeSet;\r\nuse chdemko\\SortedCollection\\ReversedSet;\r\nuse chdemko\\SortedCollection\\SubSet;\r\n\r\n$set = TreeSet::create();\r\n$set[4] = true;\r\n$set[2] = true;\r\n$set[6] = true;\r\nunset($set[4]);\r\n\r\n// This will display 1\r\necho isset($set[2]) . PHP_EOL;\r\n\r\n// This will display 1\r\necho $set[2] . PHP_EOL;\r\n\r\n// This will display nothing\r\necho $set[4] . PHP_EOL;\r\n~~~\r\n\r\nA lot of methods has been implemented to give access to the minimum element, the lower element... Please see [the api documentation](api).\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}